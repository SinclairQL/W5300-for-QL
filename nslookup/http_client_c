/*
	http-client-c
	Copyright (C) 2012-2013  Swen Kooij

	This file is part of http-client-c.

    http-client-c is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    http-client-c is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with http-client-c. If not, see <http://www.gnu.org/licenses/>.

	Warning:
	This library does not tend to work that stable nor does it fully implent the
	standards described by IETF. For more information on the precise implentation of the
	Hyper Text Transfer Protocol:

	http://www.ietf.org/rfc/rfc2616.txt
*/

#pragma GCC diagnostic ignored "-Wwrite-strings"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>


#include <errno.h>
#include "nslookup_h"
#include "stringx_h"
#include "urlparser_h"

#include "in_h"
#include "socket_h"


/*
	Prototype functions
*/
struct http_response* http_req(char *http_headers, struct parsed_url *purl);
struct http_response* http_get(char *url, char *custom_headers);
struct http_response* http_head(char *url, char *custom_headers);
struct http_response* http_post(char *url, char *custom_headers, char *post_data);


/*
	Represents an HTTP html response
*/
struct http_response
{
	struct parsed_url *request_uri;
	char *body;
	char *status_code;
	int status_code_int;
	char *status_text;
	char *request_headers;
	char *response_headers;
};


struct http_response * parse_response(char *response) {
	
	char *status_line;
	char *status_code;
	struct http_response *hresp;
	char *headers;
	char *token;
	char *original_status_line;

	hresp = (struct http_response*)malloc(sizeof(struct http_response));
	if(hresp == NULL)
	{
		printf("Unable to allocate memory for htmlcontent.");
		return NULL;
	}
	hresp->body = NULL;
	hresp->request_headers = NULL;
	hresp->response_headers = NULL;
	hresp->status_code = NULL;
	hresp->status_text = NULL;

	status_line = get_until(response, "\r\n");
	original_status_line = status_line;
	token = strtok(status_line," "); /* HTTP/1.? */
	token = strtok(NULL," "); /* status code */
	status_code = strdup(token);
	token = strtok(NULL," "); /* status text */
	hresp->status_code = status_code;
	hresp->status_code_int = atoi(status_code);
	hresp->status_text = strdup(token);
	free(original_status_line);

	headers = get_until(response, "\r\n\r\n");
	hresp->response_headers = headers;
	{
		int offset = str_index_of(response, "\r\n\r\n");
		hresp->body = &(response[offset+4]);
	}
	return hresp;
}

/*
	Handles redirect if needed for get requests
*/
struct http_response* handle_redirect_get(struct http_response* hresp, char* custom_headers)
{
	if(hresp->status_code_int > 300 && hresp->status_code_int < 399)
	{
		char *token = strtok(hresp->response_headers, "\r\n");
		while(token != NULL)
		{
			if(str_contains(token, "Location:"))
			{
				/* Extract url */
				char *location = str_replace("Location: ", "", token);
				return http_get(location, custom_headers);
			}
			token = strtok(NULL, "\r\n");
		}
	}
	else
	{
		/* We're not dealing with a redirect, just return the same structure */
		return hresp;
	}
}

/*
	Handles redirect if needed for head requests
*/
struct http_response* handle_redirect_head(struct http_response* hresp, char* custom_headers)
{
	if(hresp->status_code_int > 300 && hresp->status_code_int < 399)
	{
		char *token = strtok(hresp->response_headers, "\r\n");
		while(token != NULL)
		{
			if(str_contains(token, "Location:"))
			{
				/* Extract url */
				char *location = str_replace("Location: ", "", token);
				return http_head(location, custom_headers);
			}
			token = strtok(NULL, "\r\n");
		}
	}
	else
	{
		/* We're not dealing with a redirect, just return the same structure */
		return hresp;
	}
}

/*
	Handles redirect if needed for post requests
*/
struct http_response* handle_redirect_post(struct http_response* hresp, char* custom_headers, char *post_data)
{
	if(hresp->status_code_int > 300 && hresp->status_code_int < 399)
	{
		char *token = strtok(hresp->response_headers, "\r\n");
		while(token != NULL)
		{
			if(str_contains(token, "Location:"))
			{
				/* Extract url */
				char *location = str_replace("Location: ", "", token);
				return http_post(location, custom_headers, post_data);
			}
			token = strtok(NULL, "\r\n");
		}
	}
	else
	{
		/* We're not dealing with a redirect, just return the same structure */
		return hresp;
	}
}

/*
	Makes a HTTP request and returns the response
*/
struct http_response* http_req(char *http_headers, struct parsed_url *purl)
{
	int sock;
	int tmpres;
	int numrecvs=0;
	struct http_response *hresp;
	struct sockaddr_in *remote;
	int sent = 0;
	char *status_line;
	char *status_code;
	char *status_text;
	char *headers;
	char *body;
	char *response;
	unsigned char *BUF = malloc(2049);
	size_t received_len = 0;
	size_t response_len = 0;
	char input[100];

	/* Parse url */
	if(purl == NULL)
	{
		printf("Unable to parse url");
	    free(BUF);
		return NULL;
	}

	/* Create TCP socket */
	if((sock = socket(1, Sn_MR_TCP, 1234 /* src port */, 0 /* flags */)) < 0)
	{
	    printf("Can't create TCP socket");
	    free(BUF);
		return NULL;
	}
	/* Set remote->sin_addr.s_addr */
	remote = (struct sockaddr_in *)malloc(sizeof(struct sockaddr_in *));
	remote->sin_family = AF_INET;
	/* Connect */
	if(connect(1, (uint8 *)(&(purl->ip)), atoi(purl->port)) <= 0)
	{
	    printf("Could not connect");
	    free(BUF);
		return NULL;
	}
	/* Send headers to server */
	while(sent < strlen(http_headers))
	{
	    tmpres = send(1, ((uint8 *)http_headers)+sent, strlen(http_headers)-sent);
		if(tmpres == -1)
		{
			printf("Can't send headers");
		    free(BUF);
			return NULL;
		}
		sent += tmpres;
	 }

	response = (char*)malloc(0);

	while((received_len = recv(1, BUF, 2048, 0)) > 0)
	{
		numrecvs++;
        BUF[received_len] = '\0';
		response = (char*)realloc(response, response_len + received_len + 1);
		memcpy(response+response_len, BUF, received_len);
		response_len += received_len;
	}
	/* TODO error handling in socket library?
	if (received_len < 0)
    {
		free(http_headers);
		#ifdef _WIN32
			closesocket(sock);
		#else
			close(1);
		#endif
        printf("Unable to receive");
		return NULL;
    }
    */
	response = (char*)realloc(response, response_len + 1);
	response[response_len] = '\0';
	printf("Received a total of %d bytes with %d recv()s.\n", response_len,numrecvs);
	#ifdef _WIN32
		closesocket(sock);
	#else
		close(1);
	#endif
	hresp = parse_response(response);
	hresp->request_headers = http_headers;
	hresp->request_uri = purl;
    free(BUF);
	return hresp;
}

/*
	Makes a HTTP GET request to the given url
*/
struct http_response* http_get(char *url, char *custom_headers)
{
	struct http_response *hresp;
	/* Parse url */
	struct parsed_url *purl = parse_url(url);
	char *http_headers = (char*)malloc(1024);
	printf("Parse URL '%s'.\n",url);
	if(purl == NULL)
	{
		printf("Unable to parse URL '%s'.\n", url);
		return NULL;
	}

	printf("URL->host '%s', port %s, scheme %s, path '%s'.\n",purl->host, purl->port, purl->scheme, purl->path);

	/* Build query/headers */
	if(purl->path != NULL)
	{
		if(purl->query != NULL)
		{
			sprintf(http_headers, "GET /%s?%s HTTP/1.1\r\nHost:%s\r\nConnection: close\r\n", purl->path, purl->query, purl->host);
		}
		else
		{
			sprintf(http_headers, "GET /%s HTTP/1.1\r\nHost:%s\r\nConnection: close\r\n", purl->path, purl->host);
		}
	}
	else
	{
		if(purl->query != NULL)
		{
			sprintf(http_headers, "GET /?%s HTTP/1.1\r\nHost:%s\r\nConnection: close\r\n", purl->query, purl->host);
		}
		else
		{
			sprintf(http_headers, "GET / HTTP/1.1\r\nHost:%s\r\nConnection: close\r\n", purl->host);
		}
	}

	/* Handle authorisation if needed */
	if(purl->username != NULL)
	{
		char *base64;
		char *auth_header;
		/* Format username:password pair */
		char *upwd = (char*)malloc(1024);
		sprintf(upwd, "%s:%s", purl->username, purl->password);
		upwd = (char*)realloc(upwd, strlen(upwd) + 1);

		/* Base64 encode */
		base64 = base64_encode(upwd);

		/* Form header */
		auth_header = (char*)malloc(1024);
		sprintf(auth_header, "Authorization: Basic %s\r\n", base64);
		auth_header = (char*)realloc(auth_header, strlen(auth_header) + 1);

		/* Add to header */
		http_headers = (char*)realloc(http_headers, strlen(http_headers) + strlen(auth_header) + 2);
		sprintf(http_headers, "%s%s", http_headers, auth_header);
	}

	/* Add custom headers, and close */
	if(custom_headers != NULL)
	{
		sprintf(http_headers, "%s%s\r\n", http_headers, custom_headers);
	}
	else
	{
/*		sprintf(http_headers, "%s\r\n", http_headers); */
		strcat(http_headers, "\r\n");
	}
	http_headers = (char*)realloc(http_headers, strlen(http_headers) + 1);

	/* Make request and return response */
	hresp = http_req(http_headers, purl);

	/* Handle redirect */
	return handle_redirect_get(hresp, custom_headers);
}

/*
	Makes a HTTP POST request to the given url
*/
struct http_response* http_post(char *url, char *custom_headers, char *post_data)
{
	char *http_headers;
	struct http_response *hresp;
	/* Parse url */
	struct parsed_url *purl = parse_url(url);
	if(purl == NULL)
	{
		printf("Unable to parse url");
		return NULL;
	}

	/* Declare variable */
	http_headers = (char*)malloc(1024);

	/* Build query/headers */
	if(purl->path != NULL)
	{
		if(purl->query != NULL)
		{
			sprintf(http_headers, "POST /%s?%s HTTP/1.1\r\nHost:%s\r\nConnection:close\r\nContent-Length:%zu\r\nContent-Type:application/x-www-form-urlencoded\r\n", purl->path, purl->query, purl->host, strlen(post_data));
		}
		else
		{
			sprintf(http_headers, "POST /%s HTTP/1.1\r\nHost:%s\r\nConnection:close\r\nContent-Length:%zu\r\nContent-Type:application/x-www-form-urlencoded\r\n", purl->path, purl->host, strlen(post_data));
		}
	}
	else
	{
		if(purl->query != NULL)
		{
			sprintf(http_headers, "POST /?%s HTTP/1.1\r\nHost:%s\r\nConnection:close\r\nContent-Length:%zu\r\nContent-Type:application/x-www-form-urlencoded\r\n", purl->query, purl->host, strlen(post_data));
		}
		else
		{
			sprintf(http_headers, "POST / HTTP/1.1\r\nHost:%s\r\nConnection:close\r\nContent-Length:%zu\r\nContent-Type:application/x-www-form-urlencoded\r\n", purl->host, strlen(post_data));
		}
	}

	/* Handle authorisation if needed */
	if(purl->username != NULL)
	{
		char *base64;
		char *auth_header;
		/* Format username:password pair */
		char *upwd = (char*)malloc(1024);
		sprintf(upwd, "%s:%s", purl->username, purl->password);
		upwd = (char*)realloc(upwd, strlen(upwd) + 1);

		/* Base64 encode */
		base64 = base64_encode(upwd);

		/* Form header */
		auth_header = (char*)malloc(1024);
		sprintf(auth_header, "Authorization: Basic %s\r\n", base64);
		auth_header = (char*)realloc(auth_header, strlen(auth_header) + 1);

		/* Add to header */
		http_headers = (char*)realloc(http_headers, strlen(http_headers) + strlen(auth_header) + 2);
		sprintf(http_headers, "%s%s", http_headers, auth_header);
	}

	if(custom_headers != NULL)
	{
		sprintf(http_headers, "%s%s\r\n", http_headers, custom_headers);
		sprintf(http_headers, "%s\r\n%s", http_headers, post_data);
	}
	else
	{
		sprintf(http_headers, "%s\r\n%s", http_headers, post_data);
	}
	http_headers = (char*)realloc(http_headers, strlen(http_headers) + 1);

	/* Make request and return response */
	hresp = http_req(http_headers, purl);

	/* Handle redirect */
	return handle_redirect_post(hresp, custom_headers, post_data);
}

/*
	Makes a HTTP HEAD request to the given url
*/
struct http_response* http_head(char *url, char *custom_headers)
{
	char *http_headers;
	struct http_response *hresp;
	/* Parse url */
	struct parsed_url *purl = parse_url(url);
	if(purl == NULL)
	{
		printf("Unable to parse url");
		return NULL;
	}

	/* Declare variable */
	http_headers = (char*)malloc(1024);

	/* Build query/headers */
	if(purl->path != NULL)
	{
		if(purl->query != NULL)
		{
			sprintf(http_headers, "HEAD /%s?%s HTTP/1.1\r\nHost:%s\r\nConnection:close\r\n", purl->path, purl->query, purl->host);
		}
		else
		{
			sprintf(http_headers, "HEAD /%s HTTP/1.1\r\nHost:%s\r\nConnection:close\r\n", purl->path, purl->host);
		}
	}
	else
	{
		if(purl->query != NULL)
		{
			sprintf(http_headers, "HEAD/?%s HTTP/1.1\r\nHost:%s\r\nConnection:close\r\n", purl->query, purl->host);
		}
		else
		{
			sprintf(http_headers, "HEAD / HTTP/1.1\r\nHost:%s\r\nConnection:close\r\n", purl->host);
		}
	}

	/* Handle authorisation if needed */
	if(purl->username != NULL)
	{
		char *base64;
		char *auth_header;
		/* Format username:password pair */
		char *upwd = (char*)malloc(1024);
		sprintf(upwd, "%s:%s", purl->username, purl->password);
		upwd = (char*)realloc(upwd, strlen(upwd) + 1);

		/* Base64 encode */
		base64 = base64_encode(upwd);

		/* Form header */
		auth_header = (char*)malloc(1024);
		sprintf(auth_header, "Authorization: Basic %s\r\n", base64);
		auth_header = (char*)realloc(auth_header, strlen(auth_header) + 1);

		/* Add to header */
		http_headers = (char*)realloc(http_headers, strlen(http_headers) + strlen(auth_header) + 2);
		sprintf(http_headers, "%s%s", http_headers, auth_header);
	}

	if(custom_headers != NULL)
	{
		sprintf(http_headers, "%s%s\r\n", http_headers, custom_headers);
	}
	else
	{
		sprintf(http_headers, "%s\r\n", http_headers);
	}
	http_headers = (char*)realloc(http_headers, strlen(http_headers) + 1);

	/* Make request and return response */
	hresp = http_req(http_headers, purl);

	/* Handle redirect */
	return handle_redirect_head(hresp, custom_headers);
}

/*
	Do HTTP OPTIONs requests
*/
struct http_response* http_options(char *url)
{
	char *http_headers;
	struct http_response *hresp;
	/* Parse url */
	struct parsed_url *purl = parse_url(url);
	if(purl == NULL)
	{
		printf("Unable to parse url");
		return NULL;
	}

	/* Declare variable */
	http_headers = (char*)malloc(1024);

	/* Build query/headers */
	if(purl->path != NULL)
	{
		if(purl->query != NULL)
		{
			sprintf(http_headers, "OPTIONS /%s?%s HTTP/1.1\r\nHost:%s\r\nConnection:close\r\n", purl->path, purl->query, purl->host);
		}
		else
		{
			sprintf(http_headers, "OPTIONS /%s HTTP/1.1\r\nHost:%s\r\nConnection:close\r\n", purl->path, purl->host);
		}
	}
	else
	{
		if(purl->query != NULL)
		{
			sprintf(http_headers, "OPTIONS/?%s HTTP/1.1\r\nHost:%s\r\nConnection:close\r\n", purl->query, purl->host);
		}
		else
		{
			sprintf(http_headers, "OPTIONS / HTTP/1.1\r\nHost:%s\r\nConnection:close\r\n", purl->host);
		}
	}

	/* Handle authorisation if needed */
	if(purl->username != NULL)
	{
		char *upwd;
		char *base64;
		char *auth_header;
		/* Format username:password pair */
		upwd = (char*)malloc(1024);
		sprintf(upwd, "%s:%s", purl->username, purl->password);
		upwd = (char*)realloc(upwd, strlen(upwd) + 1);

		/* Base64 encode */
		base64 = base64_encode(upwd);

		/* Form header */
		auth_header = (char*)malloc(1024);
		sprintf(auth_header, "Authorization: Basic %s\r\n", base64);
		auth_header = (char*)realloc(auth_header, strlen(auth_header) + 1);

		/* Add to header */
		http_headers = (char*)realloc(http_headers, strlen(http_headers) + strlen(auth_header) + 2);
		sprintf(http_headers, "%s%s", http_headers, auth_header);
	}

	/* Build headers */
	sprintf(http_headers, "%s\r\n", http_headers);
	http_headers = (char*)realloc(http_headers, strlen(http_headers) + 1);

	/* Make request and return response */
	hresp = http_req(http_headers, purl);

	/* Handle redirect */
	return hresp;
}

/*
	Free memory of http_response
*/
void http_response_free(struct http_response *hresp)
{
	if(hresp != NULL)
	{
		if(hresp->request_uri != NULL) parsed_url_free(hresp->request_uri);
		if(hresp->body != NULL) free(hresp->body);
		if(hresp->status_code != NULL) free(hresp->status_code);
		if(hresp->status_text != NULL) free(hresp->status_text);
		if(hresp->request_headers != NULL) free(hresp->request_headers);
		if(hresp->response_headers != NULL) free(hresp->response_headers);
		free(hresp);
	}
}

int content_size_from_headers(char *headers) {
	char *hd,*line,*name,*token, *csize;
	int idx;
	hd = headers;
	for(;;hd = NULL) {
		token = strtok(hd, "\r\n");
		if(NULL == token) {
			break;
		}
		line = token;
		idx = str_index_of(line, " ");
		name = get_until(line, " ");
		if(!stricmp(name, "content-length:")) {
			free(name);
			csize = get_until((char*)(&(line[idx+1])), "\r\n");
			break;
		}
		free(name);
	}
	if(NULL != csize) {
		int size = atoi(csize);
		free(csize);
		return size;
	}
	return 0;
}

int main (int argc, char **argv) {
	struct http_response* response;

	/*
	char buffer[1024];
	char *contents;
	char *contents_save;
	char *content_end;
	size_t nread;
	size_t content_size = 1024;
	size_t total_size = 0;
	struct http_response *response;
	FILE *sample = fopen("mdv7_sample_txt", "r");

	contents_save = contents = malloc(1);
	printf("sample: %d, contents, %d\n", (uint32)sample, (uint32)contents );

	if(NULL != sample && NULL != contents) {
		content_end = contents;
		while (!feof(sample)) {
			contents = realloc(contents,(size_t)(content_end-contents+1024));
			nread = fread(buffer, (size_t)1, 1024, sample);
			content_end = memcpy(content_end, buffer, nread);
			content_end += nread;
		}
		total_size = content_end - contents;
		printf("Content size = %d\n", total_size);
		contents = realloc(contents,(size_t)(total_size+1));
		contents[total_size] = 0;
		response = parse_response(contents);
		if(NULL != response) {
			int csize = content_size_from_headers(response->response_headers);
			printf("Status code: %d\n", response->status_code_int);
			printf("Status text: %s\n", response->status_text);
			printf("Content length from headers: %d\n", csize);
			printf("Response headers:\n%s\n", response->response_headers);
			printf("Press enter for body...\n");
			gets((char*)buffer);	
			printf("Response body:\n===\n%s\n===\n", response->body);
			free(response);
		}
		fclose(sample);
		free(contents_save);
	}
	*/
	initW5300();
	printf("*** Socket test ***\n");

	if(argc = 1) {
		int csize = -1;
		FILE *output;
		response = http_get( argv[1], NULL );
		printf("Headers:\n%s\n", response->response_headers);
		csize = content_size_from_headers(response->response_headers);
		printf( "Status code: %d\n", response->status_code_int );
		printf( "Content size: %d\n", csize );
		/* printf("\nBody:\n===\n%s\n===\n",response->body); */
		output = fopen("wget_out", "w");
		if (NULL != output && csize > 0) {
			int written = fwrite(response->body, (size_t)1, (size_t)csize, output);
			printf("Wrote %d bytes.\n", written);
			fflush(output);
		}
		fclose(output);
	} else {
		printf("give URL as argument");
	}
}
