#include <assert.h>
#include <errno.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include "http_client_h"
#include "socket_h"
#include "wget_h"
#include "w5300_h"

void initW5300() {
   uint8 tx_mem_conf[8] = {8,8,8,8,8,8,8,8};          /* for setting TMSR regsiter */
   uint8 rx_mem_conf[8] = {8,8,8,8,8,8,8,8};          /* for setting RMSR regsiter */

   uint8 ip[4] = {192,168,0,77};                   /* for setting SIP register */
   uint8 gw[4] = {192,168,0,1};                     /* for setting GAR register */
   uint8 sn[4] = {255,255,255,0};                     /* for setting SUBR register */
   uint8 mac[6] = {0x02,0x42,0x00,0x00,0x00,77};      /* locally administered mac address */

   /* initiate W5300 */
/*
   iinchip_init();
*/
   /* allocate internal TX/RX Memory of W5300 */
   if(!sysinit(tx_mem_conf,rx_mem_conf))           
   {
      printf("MEMORY CONFIG ERR.\r\n");
      exit(1);
  }

   /*setMR(getMR()|MR_FS);                            // If Little-endian, set MR_FS. */

   setSHAR(mac);                                      /* set source hardware address */
   /* configure network information */
    setGAR(gw);                                     /* set gateway IP address */
    setSUBR(sn);                                    /* set subnet mask address */
    setSIPR(ip);                                    /* set source IP address */   
}


int main (int argc, char **argv) {
  struct http_response* response;
  int received_len = 0;
  int total_received = 0;
  char BUF[1500];

  initW5300();

  if(argc = 1) {
    int csize = 0;
    int file_written = 0;
    FILE *output;
    response = http_get( argv[1], NULL );
    /*
    printf("Headers:\n%s\n", response->response_headers);
    */
    csize = content_size_from_headers(response->response_headers);
    printf( "Status code: %d\n", response->status_code_int );
    printf( "Content size: %d\n", csize );

    output = fopen("wget_out", "w");
    while(total_received < csize) {
      received_len = recv(1, BUF, 1500, 0);
      total_received += received_len;
      file_written = fwrite(BUF, (size_t)1, (size_t)received_len, output);
      if(file_written != received_len) {
        printf("FATAL: Could not write %d bytes, only wrote %d bytes.\n", received_len, file_written);
      }
      printf("Rcv %d.\n", total_received);
    }
    fclose(output);
    printf("Wrote %d bytes.\n", total_received);
    close(1);



    /* printf("\nBody:\n===\n%s\n===\n",response->body); */
    /*
    output = fopen("wget_out", "w");
    if (NULL != output && csize > 0) {
      int written = fwrite(response->body, (size_t)1, (size_t)csize, output);
      printf("Wrote %d bytes.\n", written);
      fflush(output);
    }
    fclose(output);
    */
  } else {
    printf("give URL as argument");
  }
}
