         include  dev1_w5300_in
         include  dev1_driver_in
         include  dev2_SMS1_in
         xdef     w5300_init
         xdef     w5300_socket
         xdef     w5300_connect
         xdef     w5300_send_impl
         xdef     w5300_sendto_impl
         xdef     w5300_recvfrom_impl
         xdef     w5300_recv_bytes_available
         xdef     w5300_send_bytes_available
         xdef     socket_open_udp
         xdef     socket_close
         section  w5300
w5300_init
         movea.l  #iobase,a1        ; A1 points to beginning of memory mapped IO space into W5300
         movea.l  a1,a0
         adda.l   #$1000,a0
         move.b   #0,(a0)           ; Reset the hardware through memory mapped write
; w5300rst ori.w    #MR_RST,MR(a1)    ; Reset W5300 through the mode register
; After reset, we need to wait for the W5300 to synchronize PLL
; According to documentation, this takes a maximum of 10ms
; @ 7.5 MHz 10 ms == 75000 clocks
; subq instruction operating on D register == 12 clocks
; bne instruction when branch taken ==  18 clocks
; Decrement, test and branch == 30 clocks => Need 2500 of these for a 10ms wait
         move.l   #2500,d0
tloop    subq.l   #1,d0
         bne      tloop
; Three step initialization process. Refer to W5300 datasheet chapter 5.1
; Step 1 *************
; 1. Mode register defaults after reset suit our purposes so no changes necessary
; 2. Host interrupts: default is no interrupts - use that for now
;
; Step 2 *************
; >>> 1. Basic network information
; Set source hardware address to a locally administered address
         move.l   #$02000042,SHAR(a1)
         move.w   #$4242,SHAR+4(a1)
; Set gateway address
         move.l   #$C0A80101,GAR(a1)         ; 192.168.1.1
; Set subnet mask
         move.l   #$FFFFFF00,SUBR(a1)        ; 255.255.255.0
; Set source IP == IP address of card
         move.l   #$C0A8010A,SIPR(a1)        ; 192.168.1.10
; >>> 2. Set retransmission time period and retry count
; Set RTO to 1 second (unit in RTR is 0.1 ms)
; 1s RTO is based on recommendation found in http://www.sce.carleton.ca/~nseddigh/publications/thesis-16.pdf
         move.w   #10000,RTR(a1)
; Keep the default of 8 retransmissions before giving up and closing the socket
; >>> 3. Allocate internal memory to sockets
; Keep the default 8 kb RX and 8kb TX buffer per socket
         rts
; W5300 initialization routine done
;
; socket "Connect" implementation
; d1.b = socket #(0-7)
; d2.l = destination IP
; d3.w = destination port
; Does NOT wait for connect process to end. This routine simply initiates the connect operation.
; In case of timeout during ARP, or connection initialization the socket will revert to SOCK_CLOSED state.
; Returns 0 in d0 if success
; -1 == socket not in "SOCK_INIT" state
;
; Set the base address for accessing socket registers
w5300_connect
		bsr 		sr_base
        move.w 		S_SSR(a2),d0
        cmpi.b 		#SS_INIT,d0
        beq.s 		s_dest
        moveq 		#-1,d0
        rts
; Set the destination address and port
s_dest  move.l 		d2,S_DIPR(a2)
        move.w 		d3,S_DPORTR(a2)
; Connect command
        move.w 		#SC_CONN,S_CR(a2)
        moveq 		#0,d0
        rts

s_clsd   moveq 		#err.ichn,d0                     ; -6 = invalid channel id
        rts
;
; Close a socket
; Parameters:
;  d0.b = socket number
; Returns:
;  -
; Corrupts:
;  a2,d1
socket_close
         ext.w    d0
         move.w   d0,d1
         bsr      sr_base                       ; a2 <= base address of socket n registers
		 move.b 	S_MR1(a2),d1
		 andi.b 	#S_MR_PROT,d1
		 cmpi.b 	#S_MR_TCP,d1
		 beq.s 		close_check_tcp_state
		 bra.s 		close_cmd_close
close_check_tcp_state
		 move.b 	S_SSR1(a2),d1
		 cmpi.b 	#SS_ESTD,d1
		 beq.s 		close_send_disconnect
		 cmpi.b 	#SS_CLS_WAIT,d1
		 bne.s 		close_cmd_close
close_send_disconnect
		move.b 		#SC_DISC,S_CR1(a2)
		rts
close_cmd_close
         move.b   #SC_CLOSE,S_CR1(a2)
         rts
;
; Open a UDP socket
; Parameters:
;  d0.b = socket number
;  a0 = pointer to driver definition block
; Returns:
;  d0.b = result code: -2 == socket not in closed state, -1 == not complete, 0 == success
;  a1 = address to call on the next tick if d0==-1
; Corrupts:
;  d1,d2,a2
socket_open_udp
; Check that the socket is currently in SOCK_CLOSED state
         ext.w    d0
         move.w   d0,d1
         bsr      sr_base                       ; a2 <= base address of socket n registers
         move.b   S_SSR1(a2),d2
         cmpi.b   #SS_CLSD,d2
         bne.s    socket_not_closed_err
; Set socket mode to UDP
         andi.w   #S_MR_PM,S_MR(a2)
         ori.w    #S_MR_UDP,S_MR(a2)
; Send an "open" command
         move.b   #SC_OPEN,S_CR1(a2)
; Wait for W5300 to acknowledge command by resetting command register to 0
udp_open_check_cmd_ack
         move.b   S_CR1(a2),d2
         cmpi.b   #0,d2
         beq.s    udp_open_wait_state_udp
         lea      udp_open_check_cmd_ack,a1
         move.l   a2,CHAN_REG_STORE(a0)         ; Store pointer to socket register block
         move.l   (a7),CHAN_REG_STORE+4(a0)   ; Store return address
         moveq    #err.nc,d0
         rts
udp_open_wait_state_udp
; Wait for socket to move to state SOCK_UDP
         move.b   S_SSR1(a2),d2
; TODO: testing, switch to correct implementation below on real HW
         cmpi.b   #0,d2
;         cmpi.b   #SS_UDP,d2
         beq.s    udp_open_ok
         lea      udp_open_wait_state_udp,a1
         move.l   a2,CHAN_REG_STORE(a0)         ; Store pointer to socket register block
         move.l   (a7),CHAN_REG_STORE+4(a0)   ; Store return address
         moveq    #err.nc,d0
         rts
udp_open_ok
         moveq    #0,d0
         rts
socket_not_closed_err
         moveq    #-2,d0
         rts
;
; Open a socket implementation (nowait for IOSS 'open' routine)
; Parameters:
;  d0.w = source port
;  d1.b = socket #
;  d2.b = socket type (1 = TCP, 2 = UDP)
w5300_socket
         bsr      sr_base           ; a2 := socket memory address base
         and.b    #$F0,S_MR1(a2)    ; Clear protocol bits of socket mode register
         or.b     d2,S_MR1(a2)      ; Set protocol
         move.w   d0,S_PORTR(a2)    ; Source port
		 move.b 	#$FF,S_IR1(a2)	; Clear all interrupt flags
         move.b   #SC_OPEN,S_CR1(a2)
         rts
;
; W5300 implementation of ip_send
; d1 = socket #
; d2 = # of bytes to write
; a0 = pointer to channel definition block
; a1 = pointer to start of bytes to be written
; a5 = channel local variable frame
;
w5300_send_impl
; if state is SOCK_ARP or SOCK_SYNSENT then return zero bytes written and "not complete"
; we are waiting for the socket to establish connection (SOCK_ESTABLISHED state)
		bsr 		sr_base
		move.b 		S_SSR1(a2),d7
		cmpi.b 		#SS_ARP,d7 
		beq.s 		send_impl_wait
		cmpi.b 		#SS_SYNSENT,d7
		beq.s 		send_impl_wait
; TODO verify that socket is in ESTABLISHED or CLOSE_WAIT

;
; Check if a previous send is in progress and if it is then return not complete?;
		move.b 		IO_SEND_STARTED(a5),d7
		bne.s 		send_impl_continuation
		move.b 		#1,IO_SEND_STARTED(a5) 	; Mark the fact that we are starting a send
		move.b 		#S_IR_SENDOK,S_IR1(a2)  ; Clear any sendok flag in interrupt register
;		movem.l 	d0-d3/a0-a3,-(a7)
;		move.w 		d2,d1
;		movea.l 	#0,a0
;		move.w 		$CE,a1
;		jsr			(a1)
;		movem.l		(a7)+,d0-d3/a0-a3
		bra.s		send_impl_send_bytes
send_impl_continuation
		move.b		S_IR1(a2),d7 			; Check to see if the previous send operation has completed
		andi.b 		#S_IR_SENDOK,d7
		beq.s 		send_impl_wait 			; Previous send command has not yet completed
; Previous send is complete
		tst.l 		d2
		beq.s 		send_impl_send_done
send_impl_send_bytes
; if the socket is connected then send the bytes, otherwise return error xx (end of file???, not open??, file error??)
		move.l 		d2,d6 					; Save number of bytes
		bsr 		socket_write_bytes
;		movem.l 	d0-d3/a0-a3,-(a7)
;		moveq 		#9,d1
;		movea.l 	#0,a0
;		move.w 		$CE,a1
;		jsr			(a1)
;		movem.l		(a7)+,d0-d3/a0-a3
		move.l 		d6,S_TX_WS(a2)
		move.b 		#SC_SEND,S_CR1(a2)
		move.l 		d6,d1
		move.b		S_IR1(a2),d7 			; Check to see if the send completed already
		andi.b 		#S_IR_SENDOK,d7
		beq.s 		send_impl_nc 			; if not then come back to verify completion
		move.l 		d6,d2
send_impl_send_done
		move.b 		#S_IR_SENDOK,S_IR1(a2)
		move.b 		#0,IO_SEND_STARTED(a5)
		move.l 		d2,d1
		moveq 		#0,d0
		rts
send_impl_wait
		moveq 		#0,d1 			; Number of bytes sent
send_impl_nc
		moveq 		#err.nc,d0
		rts
;
;
; W5300 implementation of sendto
; Parameters:
;  d0.w = # of bytes to write
;  d1.b = socket #
;  d2.l = destination ip
;  d3.w = destination port
;  a1 = buffer address
; Returns:
;  d0.w = # of bytes written
;
w5300_sendto_impl
         bsr      sr_base                                ; a2 := socket memory address base
         bsr      socket_set_dest
         move.w   d0,d2
         bsr      socket_write_bytes                     ; d2 = # bytes to write, a1 = buffer address
         move.w   d0,S_TX_WS2(a2)
         move.b   #SC_SEND,S_CR1(a2)
         move.w   #60000,d1                              ; d1 = loop counter to wait for SENDOK before returning err.nc
sendto_wait_sendok
         move.b   S_IR1(a2),d0
         andi.b   #S_IR_SENDOK,d0
         bne.s    sendto_sendok
         cmp.b    #SS_CLSD,S_SSR1(a2)
         beq.s    sendto_sock_closed
         move.b   S_IR1(a2),d0
         andi.b   #S_IR_TIMEOUT,d0
         bne.s    sendto_sock_closed
         dbra     d1,sendto_wait_sendok
; TODO handle err.nc continuation
         rts
sendto_sendok
         and.b    #S_IR_SENDOK,S_IR1(a2)
         rts
sendto_sock_closed
         and.b    #S_IR_TIMEOUT,S_SSR1(a2)
         moveq    #0,d0
         rts
;
; W5300 implementation of recvfrom
; Parameters:
;  d0.w = # of bytes available in buffer
;  d1.b = socket #
;  a1 = buffer address
; Returns:
;  d0.w = # of bytes written
;  d2.l = peer ip
;  d3.w = peer port
;
w5300_recvfrom_impl
         bsr      sr_base                 ; a2 = socket memory base
; Check that the socket is in UDP mode
         move.b   S_MR1(a2),d4
         andi.b   #S_MR_PROT,d4                 ; Leave only protocol bits
         cmpi.b   #S_MR_UDP,d4
         bne.s    recvfrom_exit_not_udp         ; Socket is not in UDP mode
; Check if there are bytes available on the socket
         cmpi.w   #0,S_RXRSR2(a2)
         beq.s    recvfrom_no_data
; TODO check that buffer is big enough for received bytes and allocate temp buffer for subsequent calls
; if target buffer is too small for received packet
         link     a5,#-10    ; Packet info 8 bytes, #bytes available 2 bytes
         movea.l  a1,a4      ; Save buffer start address
         lea      -8(a5),a1  ; Point to local vars in stack frame
         move.w   d0,-10(a5) ; Save # of bytes available
         moveq    #8,d5      ; Read packet info |destip (4 bytes)|destport (2 bytes)|packet size(2 bytes)
         bsr.s    socket_read_bytes
         move.w   -2(a5),d5  ; # bytes in packet
         movea.l  a4,a1      ; Destination buffer address
         bsr.s    socket_read_bytes
         move.l   -8(a5),d2   ; Peer IP
         move.l   -4(a5),d3   ; Peer port #
         move.w   -2(a5),d0   ; # bytes in packet
         move.w   #SC_RECV,S_CR(a2)    ; Tell W5300 that we have read the packet
         unlk     a5
         rts
recvfrom_no_data
         rts
recvfrom_exit_not_udp
; TODO: change to correct error code
         moveq    #-7,d0
         rts
;
; Set destination for socket
; Parameters:
;  d1.b = socket #
;  d2.l = destination ip
;  d3.q = destination port
; Corrupts:
;  a2
;
socket_set_dest
         bsr      sr_base        ; a2 = base address of socket registers
         move.l   d2,S_DIPR(a2)
         move.w   d3,S_DPORTR(a2)
         rts
; Read a maximum of n bytes from socket, or up to maximum available, whichever is less
;  Parameters:
;     a1 = buffer to copy bytes to
;     a2 = socket memory base
;     d5.w = number of bytes to read
socket_read_bytes
         move.l   d5,d6
; Check if buffer is word-aligned
         move.l   a1,d7
         btst     #0,d7
         beq.s    read_word_aligned
; target buffer is unaligned
         asr.w    #1,d5
         bcs.s    read_unaligned_loop_end
         subq.w   #1,d5
         bra.s    read_unaligned_loop_end
read_unaligned_loop
         move.b   S_RXFIFO(a2),d7
         move.b   d7,(a1)+
         move.b   S_RXFIFO1(a2),d7
         move.b   d7,(a1)+
read_unaligned_loop_end
         dbra     d5,read_unaligned_loop
         move.w   S_RXFIFO(a2),d7
         btst     #0,d6                         ; Check if odd number of bytes was requested
         beq.s    read_unaligned_end
         lsr.w    #8,d7
         move.b   d7,(a1)+
         rts
read_unaligned_end
         ror.w    #8,d7
         move.b   d7,(a1)+
         lsr.w    #8,d7
         move.b   d7,(a1)+
         rts
;
read_word_aligned
         asr.w    #1,d5
         bcs.s    read_word_aligned_loop_end
         subq.w   #1,d5
         bra.s    read_word_aligned_loop_end
read_word_aligned_loop
; TODO: use the implementation on next line for speed when not debugging
;         move.w   S_RXFIFO(a2),(a1)+
         move.w   S_RXFIFO(a2),d7
         move.w   d7,(a1)+
read_word_aligned_loop_end
         dbra     d5,read_word_aligned_loop
         move.w   S_RXFIFO(a2),d7
         btst     #0,d6                         ; Check if odd number of bytes was requested
         beq.s    read_word_aligned_end
         lsr.w    #8,d7
         move.b   d7,(a1)+
         rts
read_word_aligned_end
         move.w   d7,(a1)+
         rts
;
; Write bytes to a socket
; Parameters:
;  d1.b = socket #
;  d2.l = number of bytes to write
;  a1 = pointer to buffer of bytes to write
; Returns:
;  d0.w = number of bytes written
;
socket_write_bytes
		tst.l 		d2
		bne.s 		start_socket_write
		rts
start_socket_write
; N.B we can't know if the buffer is aligned on a word boundary!
; and consequently need to use either byte or word sized memory move operations.
		bsr.s		sr_base                       ; a2 := socket register base
		move.l		a1,d7
		btst		#0,d7
		beq.s		write_word_aligned            ; Buffer is word-aligned
; Write from a non-aligned buffer using byte-sized operations
; datasheet specifies that FIFO writes must always be an even number of bytes with a dummy padding if necessary
write_byte_sized_loop
		move.b		(a1)+,S_TXFIFO(a2)
		subq.l		#1,d2
		beq.s		write_dummy_byte
		move.b		(a1)+,S_TXFIFO+1(a2)
		dbra		d2,write_byte_sized_loop
		rts 		; If we end up here the number of bytes was even and no need to write dummy byte
write_dummy_byte
		move.b 		#0,S_TXFIFO+1(a2) 	; Write the dummy byte
		rts
write_word_aligned
		asr.l		#1,d2
		bcs.s		w_wloop
		subq.l		#1,d2
w_wloop
		move.w		(a1)+,S_TXFIFO(a2)
		dbf			d2,w_wloop
		rts
;
; Find base address for a socket's registers and return it in a2
; Parameters:
;        d1.b     number of socket (0-7)
; Returns:
;        a2.l     base address of register bank for socket number passed in d1
; Corrupts:
;        d7

sr_base  movea.l  #iobase+S_BASE,a2
         ext.w    d1
         move.w   d1,d7
         mulu     #S_SIZE,d7
         adda.w   d7,a2
         rts
;;
;;        w_rdbuf reads number of bytes from socket n to buffer
;;        parameters:
;;        d1.b     number of socket (0-7)
;;        d2.w     number of bytes to read CORRUPTED
;;        a1       pointer to buffer area. Needs to be a multiple of two bytes since data is read
;;                 from W5300 in word sized operations
;;        corrupts:
;;        a2,a3
;;        d2
;;
;
; We are reading in word sized numbers so the number of read operations is
; number of bytes div 2 (+1 if odd number of bytes)
; since we are looping with dbf d2 will contain number of loops - 1
;
w_rdbuf  asr.w    #1,d2
         bcs.s    wrb_odd
         subq.w   #1,d2
; Get the base address of this socket's registers into a2
wrb_odd  bsr      sr_base
         movea.l  a1,a3
w_rdloop move.w   S_RXFIFO(a2),(a3)+
         dbf      d2,w_rdloop
         rts
; Check if there are bytes available to receive on a socket
; Parameters:
;  d0.b = # of socket to check
; Returns:
;  d1.l = # of bytes available
; Corrupts:
;  a2
; 
w5300_recv_bytes_available
		move.b		d0,d1
		ext.w		d1
		bsr			sr_base			; Socket base address to a2
		move.l		S_RXRSR(a2),d1
		andi.l		#$1FFFF,d1		; Maximum physical size is 64k
		rts
w5300_send_bytes_available
		move.b		d0,d1
		ext.w		d1
		bsr			sr_base			; Socket base address to a2
		move.l		S_TX_FSR(a2),d1
		andi.l		#$1FFFF,d1		; Maximum physical size is 64k
		rts
;
		end
