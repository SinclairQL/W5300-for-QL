         section  resolver
         xdef     create_dns_query_buffer
         xdef     get_ip_from_dns_response
;
         xref     allocate_user_heap
         xref     deallocate_user_heap
         include  'dev1_resolv_macros_in'
         include  'dev1_driver_in'
; create_dns_query_buffer
; Parameters
;        d0=length of string pointed to by a4
;        a0=user heap free space handle
;        a4=pointer to (C-style) string representing address to resolve
; Returns:
;        d0 = status code, 0 == ok, -1 == error
;        d5 = total length of formatted DNS query
;        a2 = pointer to buffer containing the formatted DNS query
;
dns_qhl     equ      12                ; DNS header length is 12 bytes
dns_qqt     equ      4                 ; Four bytes at end of a query question
TYPE_A      equ      1
TYPE_CNAME  equ      5
CLASS_IN    equ      1
; Calculate the number of bytes required for the dns query message including trailing and leading byte
; of message string null and dns header and query record trailer
create_dns_query_buffer
         moveq    #0,d1
         move.w   d0,d1
         move.w   d0,d6                               ; Save length of string
; Two extra bytes for 'label' -> '0x05label0x00', +8 for user heap header block
         add.w    #dns_qhl+dns_qqt+2+8,d1
         move.w   d1,d5                               ; Save total length in d5 where it will be returned to caller
         bsr      allocate_user_heap
         tst.l    d0
         bne      alloc_fail                          ; Got less than the requested # of bytes
; a0 now points to allocated buffer area and a1 still points to start of address to resolve
         adda.l   #8,a0                               ; Skip over user heap header info
         movea.l  a0,a2                               ; a2 used as base address for copying into
insert_trailer
         move.w   d6,d1                               ; Length of string that was passed in
         lea      dns_qhl(a2),a3
         bsr.s    address_to_query_format
         bne      alloc_fail_release                  ; If conversion failed then release memory and exit with error
; N.B. query name is not necessarily word-aligned so we can't use word sized operations in the following
         move.b   #0,(a3)+
         move.b   #TYPE_A,(a3)+                       ; query for A records
         move.b   #0,(a3)+
         move.b   #CLASS_IN,(a3)+                     ; Class Internet
fill_header
         move.w   #0,(a2)                             ; Id for query. TODO: fill in ID of current job
         move.w   #1,4(a2)                            ; Number of questions
         move.w   #0,6(a2)                            ; Number of answers
         move.w   #0,8(a2)                            ; Number of authority resource records
         move.w   #0,10(a2)                           ; Number of additional resource records
set_header_flags
         move.w   #0,2(a2)                            ; Reset all flags
         bset     #0,2(a2)                            ; Recursion desired
         moveq    #0,d0
         rts
; Convert an address to the DNS question format
; E.g. news.lekane.com is converted to 0x04news0x06lekane0x03com0x00 (0xNN a single byte with hex value NN)
; Parameters
; a3 should point to beginning of buffer where the converted address should be written to
; N.B: at least one byte of space should be available for the case when the address in question is '.'
; a4 points to start of string to be converted
; d1.w contains length of string to be converted
; Returns:
; d0=0 means conversion succeeded
; d0=1 means the string to be converted was empty, target buffer is not written to
; d0=2 means string to be converted was an illegal dns name, e.g. ".."
address_to_query_format
         tst.w    d1
         beq.s   convert_empty_string
         cmpi.w   #255,d1                             ; Maximum total length of name is 255 bytes says the RFC
         bhi.s    convert_name_too_long
         move.w   d1,d4
         subq.w   #1,d1                               ; Set up for dbra loop which runs until d1==-1
         movea.l  a4,a1
         moveq    #0,d3                               ; d3 == length of current label (== part of dns address)
cloop
         move.b   (a4)+,d2
         cmpi.b   #'.',d2
         beq.s    cloop_end_label
         addq.w   #1,d3
         dbra     d1,cloop
         bra.s    clabel_write_label
cloop_end_label
         cmpi.w   #0,d1                               ; Is this the last character of the address?
         bne.s    cloop_test_illegal                  ; If not, test for illegal label preceding this label terminator
         cmpi.w   #1,d4                               ; It is last char: was the original length of address == 1
         beq.s    convert_add_null_terminator         ; Then we have address '.' which is a valid query, add null and terminate
cloop_test_illegal
         tst.w    d3                                  ; Check if current label is empty
         beq.s    convert_illegal_label               ; '..' in an address is illegal
         cmpi.w   #63,d3
         bhi.s    convert_illegal_label               ; Max length of a single label is 63 bytes (RFC 1035)
clabel_write_label
         move.b   d3,(a3)+                            ; Write label length to target
         subq.w   #1,d3
clabel_loop
         move.b   (a1)+,(a3)+
         dbra     d3,clabel_loop
         moveq    #0,d3                               ; Reset label length to zero, i.e. begin new label
         tst.w    d1
         blt.s    convert_add_null_terminator         ; This was the last label in the address without an ending '.'
         adda.l   #1,a1                               ; Skip over the '.' in source string
         dbra     d1,cloop
convert_add_null_terminator
         move.b   #0,(a3)+
         moveq    #0,d0
         rts
convert_empty_string
         moveq    #1,d0
         rts
convert_illegal_label
         moveq    #2,d0
         rts
convert_name_too_long
         moveq    #3,d0
         rts
; Allocation returned less bytes than we need - release the allocated block
alloc_fail_release
         bsr      deallocate_user_heap                ; a0=pointer to heap block, a1=user heap free space handle
alloc_fail
         moveq    #-1,d0
         rts
; Get an IP address from a UDP response packet
; Parameters:
;  a0 : pointer to struct hostent that will be filled with information from response
;  a3 : pointer to start of response packet which MUST be aligned on a word boundary
; 
get_ip_from_dns_response
; TODO remove this
         move.l   #0,(a0)                               ; Erase pointer to host name in struct hostent
; End TODO
         movea.l  a3,a4                               ; Save pointer to response in a4
         move.b   3(a3),d0
         andi.b   #$0F,d0                             ; Check the response code, should be 0 for no error
         bne      response_error
         move.w   4(a3),d2                            ; Number of questions
         move.w   6(a3),d3                            ; Number of answers in response
         beq.s    response_process_stack
         adda.l   #dns_qhl,a3                          ; Skip over the header and start reading answers
; while(questions>0)
         bra.s    skip_questions_end_test
skip_over_questions
         bsr      skip_over_name
         adda.l   #4,a3                               ; Skip over QTYPE and QCLASS in question
skip_questions_end_test
         dbra     d2,skip_over_questions
; end while
; Set up counters for A and CNAME resource records
         moveq    #0,d4                               ; How many A records were found
         moveq    #0,d5                               ; How many CNAME records were found
dns_response_scan_answers
         movea.l  a3,a1                               ; Store pointer to start of resource record
         bsr      skip_over_name
; Type of resource
         MWORD    a3,d1
         cmpi.w   #TYPE_A,d1                          ; Looking for an A record
         bne.s    answers_check_if_cname
         addq.w   #1,d4
         move.w   #TYPE_A,-(a7)                       ; Push resource type
         move.l   a1,-(a7)                            ; Push resource record pointer
         bra.s    next_answer
answers_check_if_cname
         cmpi.w   #TYPE_CNAME,d1
         bne.s    next_answer
         addq.w   #1,d5
         move.w   #TYPE_CNAME,-(a7)                       ; Push resource type
         move.l   a1,-(a7)                            ; Push resource record pointer
next_answer
; skip class (2 octets)
         adda.l   #2,a3
next_answer_from_ttl
; skip TTL (4 octets)
         adda.l   #4,a3
next_answer_from_res
; Read resource length
         MWORD    a3,d1
         adda.w   d1,a3                               ; Skip over resource
         dbra     d3,dns_response_scan_answers
response_process_stack
; d4 = # A records
; d5 = # CNAME records
; a0 = pointer to struct hostent
; a4 = pointer to response
         moveq    #0,d1
         moveq    #0,d6
         move.w   d4,d6                               ; Save number of A records for determining the return status
         lea      STRUCT_HE_HADDRLIST+4(a0),a1        ; First word after struct hostent...
         move.l   a1,STRUCT_HE_HALIASES(a0)           ; ... is table of pointers to CNAMEs
         move.w   d5,d1
         ext.l    d1
         lea      0(a1),a3
clear_cname_table
         move.l   #0,(a3)+
         dbra     d1,clear_cname_table                ; Need a terminating NULL long word so we do n+1 iterations
; a3 now points at start of A table
         move.l   a3,STRUCT_HE_HADDRLIST(a0)
         move.w   d4,d1
         ext.l    d1
clear_A_table
         move.l   #0,(a3)+
         dbra     d1,clear_A_table                    ; Need a terminating NULL long word so we do n+1 iterations
         movea.l  a3,a5                               ; Save it in A5
         add.w    d4,d5                               ; Total of A and CNAME records
         bra.s    resp_pop_end_check
resp_pop_resource
         movea.l  #0,a3                               ; a3 used as temp work pointer to resource record
         move.l   (a7)+,a1
         move.w   (a7)+,d1
         cmpi.w   #TYPE_A,d1
         bne.s    resp_pop_check_cname
; copy name if not yet set in h_name of struct hostent
         tst.l    (a0)                                  ; Is h_name set already set?
         bne.s    copy_ip_to_hostent
         movem.l  d0/a1-a2,-(a7)
         movea.l  a5,a2                                  ; Target location
; Already set earlier: a0 = struct hostent, a1 = pointer to start of name
         bsr.s    copy_res_name_to_target
; a3 now points to one byte past name in resource
         move.l   a5,(a0)
         movea.l  a2,a5
         movem.l  (a7)+,d0/a1-a2
copy_ip_to_hostent
         move.l   STRUCT_HE_HADDRLIST(a0),a2
find_a_record_slot
         tst.l    (a2)+
         bne      find_a_record_slot
; Save pointer to ip address in the first empty slot
         move.l   a5,d0
         btst     #0,d0
         beq.s    ip_target_word_aligned
         addq.l   #1,d0
         movea.l  d0,a5
ip_target_word_aligned
         move.l   a5,-(a2)
; TODO now just insert dead beef as ip address
         cmpa.l   #0,a3                               ; Do we already have a pointer to res record past the name?
         bne.s    find_and_copy_ip_from_rr
; Otherwise skip past name (without following compression) and set a3 to point to one byte past it
         movea.l  a1,a3
         bsr.s    skip_over_name
find_and_copy_ip_from_rr
; At this point a3 points to byte following "name" field of resource record
; We know that this is an A record so we can just pick the ip address by offset
         lea      10(a3),a3
         MWORD    a3,d1
         swap     d1
         MWORD    a3,d1
         move.l   d1,(a5)+
         bra.s    resp_pop_end_check
resp_pop_check_cname
         cmpi.w   #TYPE_CNAME,d1
         bne.s    resp_pop_end_check
         move.l   STRUCT_HE_HALIASES(a0),a2
find_cname_record_slot
         tst.l    (a2)+
         bne      find_cname_record_slot
         move.l   a5,-(a2)
         movea.l  a5,a2
         bsr.s    copy_res_name_to_target
         movea.l  a2,a5
resp_pop_end_check
         dbra     d5,resp_pop_resource
         tst.w    d6
         beq.s    response_error
         moveq    #0,d0
         rts
response_error
         moveq    #-1,d0
         rts
; Convert and copy name from dns response resource to target location and terminate it with null
; Parameters:
;     a1 : pointer to start of dns-format name
;     a2 : pointer to target location
;     a4 : pointer to dns response
; Returns
;     a3 : pointer to byte after name
; Corrupts:
;     a1,a2,a3,d0
copy_res_name_to_target
         movea.l  #0,a3
copy_res_name
         moveq    #0,d0
         move.b   (a1)+,d0
         beq.s    copy_res_name_done
         cmpi.b   #$C0,d0
         bne.s    copy_res_uncompressed
; Deal with compression: next byte is an offset from id field of the response strcuture
         cmpa.l   #0,a3
         bne.s    copy_res_compressed
         lea      1(a1),a3
copy_res_compressed
         move.b   (a1)+,d0
         ext.w    d0
         lea      0(a4,d0.w),a1
         bra      copy_res_name
copy_res_uncompressed
         subq.b   #1,d0
copy_res_name_loop
         move.b   (a1)+,(a2)+
         dbra     d0,copy_res_name_loop
         move.b   #'.',(a2)+
         bra      copy_res_name
copy_res_name_done
; Get rid of the last '.'
         move.b   #0,-(a2)
         addq.l   #1,a2
         rts
;
; Skip over name in DNS format also taking into account the compression scheme in RFC 1035 ch. 4.1.4
; Parameters: a3, pointer to start of name, on exit will point to octet immediately following the name
;
skip_over_name
         move.b   (a3)+,d0
         beq.s    skip_done
         cmpi.b   #63,d0
         bhi.s    skip_compression
         adda.l   d0,a3
         bra      skip_over_name
skip_done
         rts
skip_compression
         move.b   d0,d1
         andi.b   #$C0,d1
         cmpi.b   #$C0,d1
         bne.s    unknown_compression
         adda.l   #1,a3
         moveq    #0,d0
         rts
unknown_compression
         moveq    #-1,d0
         rts
         end
